package com.restaurant.pos.service;

import com.restaurant.pos.db.Database;

import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class PromoService {
    public static record Promo(int id, int menuItemId, double discountPercent, LocalDate startDate, LocalDate endDate, String reason, boolean autoGenerated) {}

    public void generateExpiryBasedPromos(int daysBeforeExpiry, double discountPercent) {
        String expiringSql = "SELECT DISTINCT menu_item_id, MIN(expiry_date) AS expiry FROM inventory_batch WHERE expiry_date IS NOT NULL AND DATE(expiry_date) <= DATE('now', ?) AND quantity > 0 GROUP BY menu_item_id";
        try (Connection conn = Database.getConnection()) {
            conn.setAutoCommit(false);
            try (PreparedStatement ps = conn.prepareStatement(expiringSql)) {
                ps.setString(1, "+" + daysBeforeExpiry + " day");
                try (ResultSet rs = ps.executeQuery()) {
                    while (rs.next()) {
                        int menuItemId = rs.getInt("menu_item_id");
                        LocalDate today = LocalDate.now();
                        LocalDate end = today.plusDays(daysBeforeExpiry);
                        upsertPromo(conn, menuItemId, discountPercent, today, end, "Expiry-based promo", true);
                    }
                }
            }
            conn.commit();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    private void upsertPromo(Connection conn, int menuItemId, double discountPercent, LocalDate start, LocalDate end, String reason, boolean auto) throws SQLException {
        String exists = "SELECT id FROM promo WHERE menu_item_id = ? AND auto_generated = 1 AND DATE(end_date) >= DATE('now')";
        try (PreparedStatement ps = conn.prepareStatement(exists)) {
            ps.setInt(1, menuItemId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    int id = rs.getInt(1);
                    try (PreparedStatement upd = conn.prepareStatement("UPDATE promo SET discount_percent=?, start_date=?, end_date=?, reason=? WHERE id=?")) {
                        upd.setDouble(1, discountPercent);
                        upd.setString(2, start.toString());
                        upd.setString(3, end.toString());
                        upd.setString(4, reason);
                        upd.setInt(5, id);
                        upd.executeUpdate();
                    }
                } else {
                    try (PreparedStatement ins = conn.prepareStatement("INSERT INTO promo(menu_item_id, discount_percent, start_date, end_date, reason, auto_generated) VALUES (?,?,?,?,?,1)")) {
                        ins.setInt(1, menuItemId);
                        ins.setDouble(2, discountPercent);
                        ins.setString(3, start.toString());
                        ins.setString(4, end.toString());
                        ins.setString(5, reason);
                        ins.executeUpdate();
                    }
                }
            }
        }
    }

    public List<Promo> listActivePromos() {
        String sql = "SELECT id, menu_item_id, discount_percent, start_date, end_date, reason, auto_generated FROM promo WHERE DATE(start_date) <= DATE('now') AND DATE(end_date) >= DATE('now') ORDER BY end_date";
        List<Promo> promos = new ArrayList<>();
        try (Connection conn = Database.getConnection(); PreparedStatement ps = conn.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                promos.add(new Promo(
                        rs.getInt(1),
                        rs.getInt(2),
                        rs.getDouble(3),
                        LocalDate.parse(rs.getString(4)),
                        LocalDate.parse(rs.getString(5)),
                        rs.getString(6),
                        rs.getInt(7) == 1
                ));
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        return promos;
    }
}
